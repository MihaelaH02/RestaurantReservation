// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace RestaurantReservation.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250413080449_UpdateMigration")]
    partial class UpdateMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RestaurantReservation.Models.AdditionalFunctionality.RestaurantSearchFilter", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UUID");

                    b.Property<short>("FilterType")
                        .HasColumnType("smallint")
                        .HasColumnName("FILER_TYPE");

                    b.Property<string>("FilterValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FILTER_VALUE");

                    b.HasKey("UUID");

                    b.ToTable("ARG_RESTAURANT_SEARCH_FILTERS");
                });

            modelBuilder.Entity("RestaurantReservation.Models.Nomenclatures.AccountRoleType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ROLE");

                    b.HasKey("Id");

                    b.ToTable("ACCOUNT_ROLE_TYPE");
                });

            modelBuilder.Entity("RestaurantReservation.Models.Nomenclatures.NotificationEvents", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Event")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EVENT");

                    b.HasKey("Id");

                    b.ToTable("NOTIFICATION_EVENTS");
                });

            modelBuilder.Entity("RestaurantReservation.Models.Nomenclatures.RestaurantAtmosphere", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Atmosphere")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ATMOSPHERE");

                    b.HasKey("Id");

                    b.ToTable("RESTAURANT_ATMOSPHERE");
                });

            modelBuilder.Entity("RestaurantReservation.Models.Nomenclatures.RestaurantLocations", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LOCATION");

                    b.HasKey("Id");

                    b.ToTable("RESTAURANT_LOCATIONS");
                });

            modelBuilder.Entity("RestaurantReservation.Models.Nomenclatures.RestaurantSpecialConditions", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("SpecialCondition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SPECIAL_CONDITION");

                    b.Property<byte[]>("Status")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("STATUS");

                    b.HasKey("Id");

                    b.ToTable("RESTAURANT_SPECIAL_CONDITIONS");
                });

            modelBuilder.Entity("RestaurantReservation.Models.Nomenclatures.RestaurantTableTypes", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<short>("Seats")
                        .HasColumnType("smallint")
                        .HasColumnName("SEATS");

                    b.Property<string>("TableType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TABLE_TYPE");

                    b.HasKey("Id");

                    b.ToTable("RESTAURANT_TABLE_TYPES");
                });

            modelBuilder.Entity("RestaurantReservation.Models.Other.Comments", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("COMMENT");

                    b.Property<short>("RESERVATION_ID")
                        .HasColumnType("smallint");

                    b.Property<float>("Rate")
                        .HasColumnType("real")
                        .HasColumnName("RATE");

                    b.HasKey("Id");

                    b.HasIndex("RESERVATION_ID");

                    b.ToTable("COMMENTS");
                });

            modelBuilder.Entity("RestaurantReservation.Models.Reservation.ReservationRequestQueue", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<short>("RESERVATION_ID")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("RESERVATION_ID");

                    b.ToTable("RESERVATION_REQUEST_QUEUE");
                });

            modelBuilder.Entity("RestaurantReservation.Models.Reservation.Reservations", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<short>("CLIENT_ID")
                        .HasColumnType("smallint");

                    b.Property<float>("Duration")
                        .HasColumnType("real")
                        .HasColumnName("DURATION");

                    b.Property<short>("LOCATION_ID")
                        .HasColumnType("smallint");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NOTE");

                    b.Property<int>("PeopleNumber")
                        .HasColumnType("int")
                        .HasColumnName("PEOPLE_NUMBER");

                    b.Property<short>("PointsUsed")
                        .HasColumnType("smallint")
                        .HasColumnName("POINTS_USED");

                    b.Property<short>("RESTAURANT_ID")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("REG_DATE");

                    b.Property<string>("ResarvationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NAME_RESERVATION");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("RESERVATION_DATE");

                    b.Property<byte[]>("Status")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("STATUS");

                    b.Property<DateTime>("StatusChangeDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("STATUS_CHANGE_DATE");

                    b.Property<short>("TABLE_TYPE_ID")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CLIENT_ID");

                    b.HasIndex("LOCATION_ID");

                    b.HasIndex("RESTAURANT_ID");

                    b.HasIndex("TABLE_TYPE_ID");

                    b.ToTable("RESERVATIONS");
                });

            modelBuilder.Entity("RestaurantReservation.Models.Reservation.RestaurantMonthlySchedule", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<DateTime>("Day")
                        .HasColumnType("datetime2")
                        .HasColumnName("DAY");

                    b.Property<int>("FreeTables")
                        .HasColumnType("int")
                        .HasColumnName("FREE_TABLES");

                    b.Property<short>("SHEME_ID")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("SHEME_ID");

                    b.ToTable("RESTAURANT_MONTHLY_SCHEDULE");
                });

            modelBuilder.Entity("RestaurantReservation.Models.RestaurantsSettings.RestaurantCapacitySheme", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<short>("LOCATION_ID")
                        .HasColumnType("smallint");

                    b.Property<short>("RESTAURANT_ID")
                        .HasColumnType("smallint");

                    b.Property<short>("TABLE_TYPE_ID")
                        .HasColumnType("smallint");

                    b.Property<int>("TableCount")
                        .HasColumnType("int")
                        .HasColumnName("TABLE_COUNT");

                    b.HasKey("Id");

                    b.HasIndex("LOCATION_ID");

                    b.HasIndex("RESTAURANT_ID");

                    b.HasIndex("TABLE_TYPE_ID");

                    b.ToTable("RESTAURANT_CAPACITY_SCHEME");
                });

            modelBuilder.Entity("RestaurantReservation.Models.RestaurantsSettings.RestaurantImages", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IMAGE");

                    b.Property<short>("RESTAURANT_ID")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("RESTAURANT_ID");

                    b.ToTable("RESTAURANT_IMAGES");
                });

            modelBuilder.Entity("RestaurantReservation.Models.RestaurantsSettings.RestaurantScheduleSettings", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<short>("HourFrom")
                        .HasColumnType("smallint")
                        .HasColumnName("HOUR_FROM");

                    b.Property<short>("HourTo")
                        .HasColumnType("smallint")
                        .HasColumnName("HOUR_TO");

                    b.Property<short?>("RESTAURANT_ID")
                        .HasColumnType("smallint");

                    b.Property<short>("SPECIAL_CONDITION_ID")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("SpecificDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("SPECIFIC_DATE");

                    b.Property<short>("WeekDay")
                        .HasColumnType("smallint")
                        .HasColumnName("WEEK_DAY");

                    b.HasKey("Id");

                    b.HasIndex("RESTAURANT_ID");

                    b.HasIndex("SPECIAL_CONDITION_ID");

                    b.ToTable("RESTAURANT_SCHEDULE_SETTINGS");
                });

            modelBuilder.Entity("RestaurantReservation.Models.System.NotificationSettings", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<short>("EVENT_ID")
                        .HasColumnType("smallint");

                    b.Property<short?>("RESTAURANT_ID")
                        .HasColumnType("smallint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TITLE");

                    b.HasKey("Id");

                    b.HasIndex("EVENT_ID");

                    b.HasIndex("RESTAURANT_ID");

                    b.ToTable("NOTIFICATION_DEFAULT_SETTINGS");
                });

            modelBuilder.Entity("RestaurantReservation.Models.System.SystemLogs", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<short>("ACCOUNT_ID")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("DATE");

                    b.Property<string>("Log")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LOG");

                    b.Property<string>("MsgStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MSG_STATUS");

                    b.HasKey("Id");

                    b.HasIndex("ACCOUNT_ID");

                    b.ToTable("SYSTEM_LOGS");
                });

            modelBuilder.Entity("RestaurantReservation.Models.Users.Accounts", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<short>("AccessFailCount")
                        .HasColumnType("smallint")
                        .HasColumnName("ACCESS_FAIL_COUNT");

                    b.Property<DateTime>("BlockedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("BLOCKED_AT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT");

                    b.Property<short>("CurrentAccessFailCount")
                        .HasColumnType("smallint")
                        .HasColumnName("CURRENT_ACCESS_FAIL_COUNT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EMAIL");

                    b.Property<DateTime>("LastChangeAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("LAST_CHANGE_AT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PASSWORD");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PHONE");

                    b.Property<short>("ROLE_ID")
                        .HasColumnType("smallint");

                    b.Property<byte[]>("Status")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("STATUS");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("USERNAME");

                    b.HasKey("Id");

                    b.HasIndex("ROLE_ID");

                    b.ToTable("ACCOUNTS");
                });

            modelBuilder.Entity("RestaurantReservation.Models.Users.Clients", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<short>("ACCOUNT_ID")
                        .HasColumnType("smallint");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FIRST_NAME");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LAST_NAME");

                    b.Property<int>("Points")
                        .HasColumnType("int")
                        .HasColumnName("POINTS");

                    b.HasKey("Id");

                    b.HasIndex("ACCOUNT_ID");

                    b.ToTable("CLIENTS");
                });

            modelBuilder.Entity("RestaurantReservation.Models.Users.PasswordResetToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PasswordResetTokens");
                });

            modelBuilder.Entity("RestaurantReservation.Models.Users.Restaurants", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<short>("ACCOUNT_ID")
                        .HasColumnType("smallint");

                    b.Property<short>("ATMOSPHERE_ID")
                        .HasColumnType("smallint");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ADDRESS");

                    b.Property<long>("Bulstat")
                        .HasColumnType("bigint")
                        .HasColumnName("BULSTAT");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("COMPANY_NAME");

                    b.Property<float>("DefaultMaxResDuration")
                        .HasColumnType("real")
                        .HasColumnName("DEFAULT_MAX_RE_DURATION");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<float>("KeepResTableTime")
                        .HasColumnType("real")
                        .HasColumnName("KEEP_RES_TABLE_TIME");

                    b.Property<float>("Rating")
                        .HasColumnType("real")
                        .HasColumnName("RATING");

                    b.HasKey("Id");

                    b.HasIndex("ACCOUNT_ID");

                    b.HasIndex("ATMOSPHERE_ID");

                    b.ToTable("RESTAURANTS");
                });

            modelBuilder.Entity("RestaurantReservation.Models.Other.Comments", b =>
                {
                    b.HasOne("RestaurantReservation.Models.Reservation.Reservations", "Reservation")
                        .WithMany()
                        .HasForeignKey("RESERVATION_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("RestaurantReservation.Models.Reservation.ReservationRequestQueue", b =>
                {
                    b.HasOne("RestaurantReservation.Models.Reservation.Reservations", "Reservation")
                        .WithMany()
                        .HasForeignKey("RESERVATION_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("RestaurantReservation.Models.Reservation.Reservations", b =>
                {
                    b.HasOne("RestaurantReservation.Models.Users.Clients", "Client")
                        .WithMany()
                        .HasForeignKey("CLIENT_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestaurantReservation.Models.Nomenclatures.RestaurantLocations", "Location")
                        .WithMany()
                        .HasForeignKey("LOCATION_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestaurantReservation.Models.Users.Restaurants", "Restaurants")
                        .WithMany()
                        .HasForeignKey("RESTAURANT_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestaurantReservation.Models.Nomenclatures.RestaurantTableTypes", "TableType")
                        .WithMany()
                        .HasForeignKey("TABLE_TYPE_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Location");

                    b.Navigation("Restaurants");

                    b.Navigation("TableType");
                });

            modelBuilder.Entity("RestaurantReservation.Models.Reservation.RestaurantMonthlySchedule", b =>
                {
                    b.HasOne("RestaurantReservation.Models.RestaurantsSettings.RestaurantCapacitySheme", "Scheme")
                        .WithMany()
                        .HasForeignKey("SHEME_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scheme");
                });

            modelBuilder.Entity("RestaurantReservation.Models.RestaurantsSettings.RestaurantCapacitySheme", b =>
                {
                    b.HasOne("RestaurantReservation.Models.Nomenclatures.RestaurantLocations", "Location")
                        .WithMany()
                        .HasForeignKey("LOCATION_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestaurantReservation.Models.Users.Restaurants", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RESTAURANT_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestaurantReservation.Models.Nomenclatures.RestaurantTableTypes", "TableType")
                        .WithMany()
                        .HasForeignKey("TABLE_TYPE_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Restaurant");

                    b.Navigation("TableType");
                });

            modelBuilder.Entity("RestaurantReservation.Models.RestaurantsSettings.RestaurantImages", b =>
                {
                    b.HasOne("RestaurantReservation.Models.Users.Restaurants", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RESTAURANT_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("RestaurantReservation.Models.RestaurantsSettings.RestaurantScheduleSettings", b =>
                {
                    b.HasOne("RestaurantReservation.Models.Users.Restaurants", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RESTAURANT_ID");

                    b.HasOne("RestaurantReservation.Models.Nomenclatures.RestaurantSpecialConditions", "RestaurantSpecialCondition")
                        .WithMany()
                        .HasForeignKey("SPECIAL_CONDITION_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("RestaurantSpecialCondition");
                });

            modelBuilder.Entity("RestaurantReservation.Models.System.NotificationSettings", b =>
                {
                    b.HasOne("RestaurantReservation.Models.Nomenclatures.NotificationEvents", "Event")
                        .WithMany()
                        .HasForeignKey("EVENT_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestaurantReservation.Models.Users.Restaurants", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RESTAURANT_ID");

                    b.Navigation("Event");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("RestaurantReservation.Models.System.SystemLogs", b =>
                {
                    b.HasOne("RestaurantReservation.Models.Users.Accounts", "Account")
                        .WithMany()
                        .HasForeignKey("ACCOUNT_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("RestaurantReservation.Models.Users.Accounts", b =>
                {
                    b.HasOne("RestaurantReservation.Models.Nomenclatures.AccountRoleType", "Role")
                        .WithMany()
                        .HasForeignKey("ROLE_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("RestaurantReservation.Models.Users.Clients", b =>
                {
                    b.HasOne("RestaurantReservation.Models.Users.Accounts", "Account")
                        .WithMany()
                        .HasForeignKey("ACCOUNT_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("RestaurantReservation.Models.Users.Restaurants", b =>
                {
                    b.HasOne("RestaurantReservation.Models.Users.Accounts", "Account")
                        .WithMany()
                        .HasForeignKey("ACCOUNT_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestaurantReservation.Models.Nomenclatures.RestaurantAtmosphere", "Atmosphere")
                        .WithMany()
                        .HasForeignKey("ATMOSPHERE_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Atmosphere");
                });
#pragma warning restore 612, 618
        }
    }
}
