// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace RestaurantReservation.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RestaurantReservation.Models.Nomenclatures.AccountRoleType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AccountRoleTypes");
                });

            modelBuilder.Entity("RestaurantReservation.Models.Nomenclatures.NotificationEvents", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Event")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NotificationEvents");
                });

            modelBuilder.Entity("RestaurantReservation.Models.Nomenclatures.RestaurantAtmosphere", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Atmosphere")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RestaurantAtmospheres");
                });

            modelBuilder.Entity("RestaurantReservation.Models.Nomenclatures.RestaurantLocations", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RestaurantLocations");
                });

            modelBuilder.Entity("RestaurantReservation.Models.Nomenclatures.RestaurantSpecialConditions", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("SpecialCondition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Status")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("RestaurantSpecialConditions");
                });

            modelBuilder.Entity("RestaurantReservation.Models.Nomenclatures.RestaurantTableTypes", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<short>("Seats")
                        .HasColumnType("smallint");

                    b.Property<string>("TableType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RestaurantTableTypes");
                });

            modelBuilder.Entity("RestaurantReservation.Models.Other.Comments", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("RESERVATION_ID")
                        .HasColumnType("smallint");

                    b.Property<float>("Rate")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("RESERVATION_ID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("RestaurantReservation.Models.Reservation.ReservationRequestQueue", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<short>("RESERVATION_ID")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("RESERVATION_ID");

                    b.ToTable("ReservationRequestQueues");
                });

            modelBuilder.Entity("RestaurantReservation.Models.Reservation.Reservations", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<short>("CLIENT_ID")
                        .HasColumnType("smallint");

                    b.Property<float>("Duration")
                        .HasColumnType("real");

                    b.Property<short>("LOCATION_ID")
                        .HasColumnType("smallint");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PeopleNumber")
                        .HasColumnType("int");

                    b.Property<short>("PointsUsed")
                        .HasColumnType("smallint");

                    b.Property<short>("RESTAURANT_ID")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RegDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Status")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("StatusChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<short>("TABLE_TYPE_ID")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CLIENT_ID");

                    b.HasIndex("LOCATION_ID");

                    b.HasIndex("RESTAURANT_ID");

                    b.HasIndex("TABLE_TYPE_ID");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("RestaurantReservation.Models.Reservation.RestaurantMonthlySchedule", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<DateTime>("Day")
                        .HasColumnType("datetime2");

                    b.Property<int>("FreeTables")
                        .HasColumnType("int");

                    b.Property<short>("SHEME_ID")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("SHEME_ID");

                    b.ToTable("RestaurantMonthlySchedules");
                });

            modelBuilder.Entity("RestaurantReservation.Models.RestaurantsSettings.RestaurantCapacitySheme", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<short>("LOCATION_ID")
                        .HasColumnType("smallint");

                    b.Property<short>("RESTAURANT_ID")
                        .HasColumnType("smallint");

                    b.Property<short>("TABLE_TYPE_ID")
                        .HasColumnType("smallint");

                    b.Property<int>("TableCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LOCATION_ID");

                    b.HasIndex("RESTAURANT_ID");

                    b.HasIndex("TABLE_TYPE_ID");

                    b.ToTable("RestaurantCapacityShemes");
                });

            modelBuilder.Entity("RestaurantReservation.Models.RestaurantsSettings.RestaurantImages", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("RESTAURANT_ID")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("RESTAURANT_ID");

                    b.ToTable("RestaurantImages");
                });

            modelBuilder.Entity("RestaurantReservation.Models.RestaurantsSettings.RestaurantScheduleSettings", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<short>("HourFrom")
                        .HasColumnType("smallint");

                    b.Property<short>("HourTo")
                        .HasColumnType("smallint");

                    b.Property<short>("RESTAURANT_ID")
                        .HasColumnType("smallint");

                    b.Property<short>("SPECIAL_CONDITION_ID")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("SpecificDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WeekDay")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RESTAURANT_ID");

                    b.HasIndex("SPECIAL_CONDITION_ID");

                    b.ToTable("RestaurantScheduleSettings");
                });

            modelBuilder.Entity("RestaurantReservation.Models.System.NotificationSettings", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("EVENT_ID")
                        .HasColumnType("smallint");

                    b.Property<short>("RESTAURANT_ID")
                        .HasColumnType("smallint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EVENT_ID");

                    b.HasIndex("RESTAURANT_ID");

                    b.ToTable("NotificationSettings");
                });

            modelBuilder.Entity("RestaurantReservation.Models.System.SystemLogs", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<short>("ACCOUNT_ID")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Log")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MsgStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ACCOUNT_ID");

                    b.ToTable("SystemLogs");
                });

            modelBuilder.Entity("RestaurantReservation.Models.Users.Accounts", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<short>("AccessFailCount")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("BlockedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastChangeAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("ROLE_ID")
                        .HasColumnType("smallint");

                    b.Property<byte[]>("Status")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ROLE_ID");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("RestaurantReservation.Models.Users.Clients", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<short>("ACCOUNT_ID")
                        .HasColumnType("smallint");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ACCOUNT_ID");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("RestaurantReservation.Models.Users.Restaurants", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<short>("ACCOUNT_ID")
                        .HasColumnType("smallint");

                    b.Property<short>("ATMOSPHERE_ID")
                        .HasColumnType("smallint");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Bulstat")
                        .HasColumnType("bigint");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("DefaultMaxResDuration")
                        .HasColumnType("real");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("KeepResTableTime")
                        .HasColumnType("real");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ACCOUNT_ID");

                    b.HasIndex("ATMOSPHERE_ID");

                    b.ToTable("Restaurants");
                });

            modelBuilder.Entity("RestaurantReservation.Models.Other.Comments", b =>
                {
                    b.HasOne("RestaurantReservation.Models.Reservation.Reservations", "Reservation")
                        .WithMany()
                        .HasForeignKey("RESERVATION_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("RestaurantReservation.Models.Reservation.ReservationRequestQueue", b =>
                {
                    b.HasOne("RestaurantReservation.Models.Reservation.Reservations", "Reservation")
                        .WithMany()
                        .HasForeignKey("RESERVATION_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("RestaurantReservation.Models.Reservation.Reservations", b =>
                {
                    b.HasOne("RestaurantReservation.Models.Users.Clients", "Client")
                        .WithMany()
                        .HasForeignKey("CLIENT_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestaurantReservation.Models.Nomenclatures.RestaurantLocations", "Location")
                        .WithMany()
                        .HasForeignKey("LOCATION_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestaurantReservation.Models.Users.Restaurants", "Restaurants")
                        .WithMany()
                        .HasForeignKey("RESTAURANT_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestaurantReservation.Models.Nomenclatures.RestaurantTableTypes", "TableType")
                        .WithMany()
                        .HasForeignKey("TABLE_TYPE_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Location");

                    b.Navigation("Restaurants");

                    b.Navigation("TableType");
                });

            modelBuilder.Entity("RestaurantReservation.Models.Reservation.RestaurantMonthlySchedule", b =>
                {
                    b.HasOne("RestaurantReservation.Models.RestaurantsSettings.RestaurantCapacitySheme", "Scheme")
                        .WithMany()
                        .HasForeignKey("SHEME_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scheme");
                });

            modelBuilder.Entity("RestaurantReservation.Models.RestaurantsSettings.RestaurantCapacitySheme", b =>
                {
                    b.HasOne("RestaurantReservation.Models.Nomenclatures.RestaurantLocations", "Location")
                        .WithMany()
                        .HasForeignKey("LOCATION_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestaurantReservation.Models.Users.Restaurants", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RESTAURANT_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestaurantReservation.Models.Nomenclatures.RestaurantTableTypes", "TableType")
                        .WithMany()
                        .HasForeignKey("TABLE_TYPE_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Restaurant");

                    b.Navigation("TableType");
                });

            modelBuilder.Entity("RestaurantReservation.Models.RestaurantsSettings.RestaurantImages", b =>
                {
                    b.HasOne("RestaurantReservation.Models.Users.Restaurants", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RESTAURANT_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("RestaurantReservation.Models.RestaurantsSettings.RestaurantScheduleSettings", b =>
                {
                    b.HasOne("RestaurantReservation.Models.Users.Restaurants", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RESTAURANT_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestaurantReservation.Models.Nomenclatures.RestaurantSpecialConditions", "RestaurantSpecialCondition")
                        .WithMany()
                        .HasForeignKey("SPECIAL_CONDITION_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("RestaurantSpecialCondition");
                });

            modelBuilder.Entity("RestaurantReservation.Models.System.NotificationSettings", b =>
                {
                    b.HasOne("RestaurantReservation.Models.Nomenclatures.NotificationEvents", "Event")
                        .WithMany()
                        .HasForeignKey("EVENT_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestaurantReservation.Models.Users.Restaurants", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RESTAURANT_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("RestaurantReservation.Models.System.SystemLogs", b =>
                {
                    b.HasOne("RestaurantReservation.Models.Users.Accounts", "Account")
                        .WithMany()
                        .HasForeignKey("ACCOUNT_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("RestaurantReservation.Models.Users.Accounts", b =>
                {
                    b.HasOne("RestaurantReservation.Models.Nomenclatures.AccountRoleType", "Role")
                        .WithMany()
                        .HasForeignKey("ROLE_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("RestaurantReservation.Models.Users.Clients", b =>
                {
                    b.HasOne("RestaurantReservation.Models.Users.Accounts", "Account")
                        .WithMany()
                        .HasForeignKey("ACCOUNT_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("RestaurantReservation.Models.Users.Restaurants", b =>
                {
                    b.HasOne("RestaurantReservation.Models.Users.Accounts", "Account")
                        .WithMany()
                        .HasForeignKey("ACCOUNT_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestaurantReservation.Models.Nomenclatures.RestaurantAtmosphere", "Atmosphere")
                        .WithMany()
                        .HasForeignKey("ATMOSPHERE_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Atmosphere");
                });
#pragma warning restore 612, 618
        }
    }
}
